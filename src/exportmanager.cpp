#include "exportmanager.h"
#include <QFile>
#include <QTextStream>
#include <QDateTime>
#include <QFileInfo>
#include <QMessageBox>

bool ExportManager::exportResults(QTableWidget* table, const QString& targetHost, const QString& fileName)
{
    if (!table || fileName.isEmpty()) {
        return false;
    }
    
    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
        QMessageBox::critical(nullptr, "Export Error", 
                             QString("Could not open file for writing:\n%1").arg(fileName));
        return false;
    }
    
    QTextStream out(&file);
    
    QFileInfo fileInfo(fileName);
    QString extension = fileInfo.suffix().toLower();
    
    if (extension == "csv") {
        out << formatAsCSV(table, targetHost);
    } else {
        out << formatAsText(table, targetHost);
    }
    
    file.close();
    return true;
}

QString ExportManager::formatResultsForClipboard(QTableWidget* table, const QString& targetHost)
{
    return formatAsText(table, targetHost);
}

QString ExportManager::formatAsText(QTableWidget* table, const QString& targetHost)
{
    QString result;
    QTextStream stream(&result);
    
    // Header
    stream << "PingTracer Results - by Harvey (www.iqterabharvey.me)\n";
    stream << QString("Target: %1\n").arg(targetHost);
    stream << QString("Generated: %1\n").arg(getCurrentTimestamp());
    stream << QString("Total Hops: %1\n").arg(table->rowCount());
    stream << "\n";
    
    // Column headers
    stream << QString("%1 %2 %3 %4 %5 %6 %7 %8\n")
              .arg("Hop", -4)
              .arg("Hostname", -20)
              .arg("IP Address", -15)
              .arg("Loss%", -6)
              .arg("Sent", -5)
              .arg("Best", -8)
              .arg("Avg", -8)
              .arg("Worst", -8);
    
    stream << QString("-").repeated(80) << "\n";
    
    // Data rows
    for (int row = 0; row < table->rowCount(); ++row) {
        QString hop = table->item(row, 0) ? table->item(row, 0)->text() : "";
        QString hostname = table->item(row, 1) ? table->item(row, 1)->text() : "";
        QString ip = table->item(row, 2) ? table->item(row, 2)->text() : "";
        QString loss = table->item(row, 3) ? table->item(row, 3)->text() : "";
        QString sent = table->item(row, 4) ? table->item(row, 4)->text() : "";
        QString best = table->item(row, 5) ? table->item(row, 5)->text() : "";
        QString avg = table->item(row, 6) ? table->item(row, 6)->text() : "";
        QString worst = table->item(row, 7) ? table->item(row, 7)->text() : "";
        
        // Truncate hostname if too long
        if (hostname.length() > 18) {
            hostname = hostname.left(15) + "...";
        }
        
        stream << QString("%1 %2 %3 %4 %5 %6 %7 %8\n")
                  .arg(hop, -4)
                  .arg(hostname, -20)
                  .arg(ip, -15)
                  .arg(loss, -6)
                  .arg(sent, -5)
                  .arg(best, -8)
                  .arg(avg, -8)
                  .arg(worst, -8);
    }
    
    stream << "\n";
    stream << "Legend:\n";
    stream << "  Hop     - Router number in path to destination\n";
    stream << "  Loss%   - Percentage of packets lost\n";
    stream << "  Sent    - Number of packets sent\n";
    stream << "  Best    - Best response time (ms)\n";
    stream << "  Avg     - Average response time (ms)\n";
    stream << "  Worst   - Worst response time (ms)\n";
    stream << "\n";
    stream << "Generated by PingTracer v1.0.0\n";
    stream << "Developer: Harvey - www.iqterabharvey.me\n";
    
    return result;
}

QString ExportManager::formatAsCSV(QTableWidget* table, const QString& targetHost)
{
    QString result;
    QTextStream stream(&result);
    
    // Header comments
    stream << "# PingTracer Results - by Harvey (www.iqterabharvey.me)\n";
    stream << QString("# Target: %1\n").arg(targetHost);
    stream << QString("# Generated: %1\n").arg(getCurrentTimestamp());
    stream << QString("# Total Hops: %1\n").arg(table->rowCount());
    stream << "#\n";
    
    // CSV Header
    stream << "Hop,Hostname,IP Address,Loss %,Sent,Best (ms),Avg (ms),Worst (ms)\n";
    
    // Data rows
    for (int row = 0; row < table->rowCount(); ++row) {
        QStringList rowData;
        
        for (int col = 0; col < table->columnCount(); ++col) {
            QString cellText = table->item(row, col) ? table->item(row, col)->text() : "";
            
            // Remove " ms" suffix for numeric columns
            if (col >= 5 && col <= 7) {
                cellText = cellText.replace(" ms", "");
            }
            
            // Escape commas and quotes in CSV
            if (cellText.contains(',') || cellText.contains('"')) {
                cellText = QString("\"%1\"").arg(cellText.replace("\"", "\"\""));
            }
            
            rowData << cellText;
        }
        
        stream << rowData.join(",") << "\n";
    }
    
    return result;
}

QString ExportManager::getCurrentTimestamp()
{
    return QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss");
}
